macro_dict = {
    # see KNOWN ISSUES comment in typstify.py
    r"\displaystyle": r"",
    r"\limits": r"",
    # greek letters
    r"\alpha": r"alpha",
    r"\beta": r"beta",
    r"\gamma": r"gamma",
    r"\delta": r"delta",
    r"\epsilon": r"epsilon",
    r"\varepsilon": r"epsilon",
    r"\zeta": r"zeta",
    r"\eta": r"eta",
    r"\theta": r"theta",
    r"\vartheta": r"theta.alt",
    r"\iota": r"iota",
    r"\kappa": r"kappa",
    r"\lambda": r"lambda",
    r"\mu": r"mu",
    r"\nu": r"nu",
    r"\xi": r"xi",
    r"\pi": r"pi",
    r"\varpi": r"pi.alt",
    r"\rho": r"rho",
    r"\varrho": r"rho.alt",
    r"\sigma": r"sigma",
    r"\varsigma": r"sigma.alt",
    r"\tau": r"tau",
    r"\upsilon": r"upsilon",
    r"\phi": r"phi.alt",
    r"\varphi": r"phi",
    r"\chi": r"chi",
    r"\psi": r"psi",
    r"\omega": r"omega",
    r"\Gamma": r"Gamma",
    r"\Delta": r"Delta",
    r"\Theta": r"Theta",
    r"\Lambda": r"lambda",
    r"\Xi": r"Xi",
    r"\Pi": r"Pi",
    r"\Sigma": r"Sigma",
    r"\Upsilon": r"Upsilon",
    r"\Phi": r"Phi",
    r"\Psi": r"Psi",
    r"\Omega": r"Omega",
    # set symbols
    r"\in": r"in",
    r"\ni": r"in.rev",
    r"\notin": r"in.not",
    r"\cap": r"sect",
    r"\cup": r"union",
    r"\bigcap": r"sect.big",
    r"\bigcup": r"union.big",
    r"\setminus": r"without",
    r"\subset": r"subset",
    r"\supset": r"supset",
    r"\subseteq": r"subset.eq",
    r"\supseteq": r"supset.eq",
    r"\subsetneq": r"subset.neq",
    r"\supsetneq": r"supset.neq",
    r"\emptyset": r"diameter",
    r"\varnothing": r"diameter",
    # calculus / analysis
    r"\min": r"min",
    r"\max": r"max",
    r"\argmin": r"argmin",
    r"\argmax": r"argmax",
    r"\lim": r"lim",
    r"\sup": r"sup",
    r"\inf": r"inf",
    r"\limsup": r"limsup",
    r"\liminf": r"liminf",
    r"\nabla": r"nabla",
    r"\partial": r"partial",
    r"\int": r"integral",
    r"\iint": r"integral.double",
    r"\iiint": r"integral.triple",
    r"rm(d)": r"dif",
    # algebra
    r"\det": r"det",
    r"\ker": r"ker",
    r"\gcd": r'math.op("gcd")',
    r"\mod": r"quad mod",
    r"\bmod": r"mod",
    # functions
    r"\arg": r"arg",
    r"\log": r"log",
    r"\ln": r"ln",
    r"\exp": r"exp",
    r"\sin": r"sin",
    r"\cos": r"cos",
    r"\tan": r"tan",
    r"\sec": r"sec",
    r"\csc": r"csc",
    r"\cot": r"cot",
    r"\sinh": r"sinh",
    r"\cosh": r"cosh",
    r"\tanh": r"tanh",
    r"\sech": r"sech",
    r"\csch": r"csch",
    r"\coth": r"coth",
    r"\arcsin": r"arcsin",
    r"\arccos": r"arccos",
    r"\arctan": r"arctan",
    r"\arcsec": r"arcsec",
    r"\arccsc": r"arccsc",
    r"\arccot": r"arccot",
    r"\arsinh": r"arsinh",
    r"\arcosh": r"arcosh",
    r"\artanh": r"artanh",
    r"\arsech": r"arsech",
    r"\arcsch": r"arcsch",
    r"\arcoth": r"arcoth",
    # relations
    r"\approx": r"approx",
    r"\neq": r"!=",
    r"\leq": r"<=",
    r"\geq": r">=",
    r"\coloneqq": r":=",
    r"\equiv": r"equiv",
    r"\leqslant": r"lt.eq.slant",
    r"\geqslant": r"gt.eq.slant",
    r"\sim": r"~",
    r"\implies": r"==>",
    r"\impliedby": r"<==",
    r"\iff": r"<==>",
    r"\to": r"->",
    r"\mapsto": r"|->",
    # misc symbols
    r"\pm": r"plus.minus",
    r"\oplus": r"plus.circle",
    r"\otimes": r"times.circle",
    r"\infty": r"oo",
    r"\sum": r"sum",
    r"\prod": r"product",
    r"\times": r"times",
    r"\cdot": r"dot.c",
    r"\cdots": r"dots.c",
    r"\ddots": r"dots.down",
    r"\vdots": r"dots.v",
    r"\ldots": r"dots",
    # brackets
    r"\{": r"{",
    r"\}": r"}",
    r"\lfloor": r"floor.l",
    r"\rfloor": r"floor.r",
    r"\lceil": r"ceil.l",
    r"\rceil": r"ceil.r",
    r"\langle": r"angle.l",
    r"\rangle": r"angle.r",
    r"\left": r"",
    r"\right": r"",
    # spacing
    r"\,": r"thin ",
    r"\:": r"med ",
    r"\;": r"thick ",
    r"\ ": r"space ",
    r"\\": r"\ ",
    r"\quad": r"quad",
    r"\qquad": r"wide",
    # fixing temporary intermediate from typstifyArraySyntax hacks
    r"\cases": r"cases",
    r"\op": r"op",
    r"\matrix(": r"mat(delim: #none,",  # ))
    r"\pmatrix": r"mat",
    r"\bmatrix(": r'mat(delim: "[",',  # ]))
    r"\vmatrix(": r'mat(delim: "|",',  # ))
    r"\semi": r"semi",
    r"\comma": r"comma",
    # environments
    r"\begin{verbatim}": r"`",
    r"\end{verbatim}": r"`",
    r"\begin{questions}": r"",
    r"\end{questions}": r"",
    r"\begin{parts}": r"#parts[",
    r"\end{parts}": r"]",
    r"\begin{subparts}": r"#subparts[",
    r"\end{subparts}": r"]",
    r"\begin{itemize}": r"",
    r"\end{itemize}": r"",
    r"\item": r"-",
}


# we need the extra \ each time since this is being parsed by regex
single_arg_macro_dict = {
    # latex macro: typst pattern
    r"\\mathbf": r"mb(\2\3\4)",
    r"\\mathbb": r"bb(\2\3\4)",
    r"\\mathbbm": r"bb(\2\3\4)",
    r"\\boldsymbol": r"bold(\2\3\4)",
    r"\\mathcal": r"cal(\2\3\4)",
    r"\\mathfrak": r"frak(\2\3\4)",
    r"\\mathrm": r"rm(\2\3\4)",
    r"\\sqrt": r"sqrt(\2\3\4)",
    r"\\bar": r"overline(\2\3\4)",
    r"\\overline": r"overline(\2\3\4)",
    r"\\widehat": r"hat(\2\3\4)",
    r"\\hat": r"hat(\2\3\4)",
    r"\\vec": r"arrow(\2\3\4)",
    r"\\abs": r"abs(\2\3\4)",
    r"_": r"_(\2\3\4)",
    r"\^": r"^(\2\3\4)",
    r"\\emph": r"_\2\3\4_",
    r"\\textbf": r"*\2\3\4*",
    r"\\pmod": r"(mod \2\3\4)",
    r"\\section": r"= \2\3\4",
}


math_delimiters_dict = {
    r"\[": r"$ ",
    r"\]": r" $",
    r"\begin{align*}": r"$ ",
    r"\end{align*}": r" $",
    r"\begin{aligned*}": r"$ ",
    r"\end{aligned*}": r" $",
    r"\begin{gather*}": r"$ ",
    r"\end{gather*}": r" $",
}
